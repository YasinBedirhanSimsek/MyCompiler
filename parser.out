Grammar:

Rule 0     S' -> STATEMENT_LIST
Rule 1     STATEMENT_LIST -> CONDITIONAL SEMI_COL
Rule 2     STATEMENT_LIST -> CONDITIONAL
Rule 3     STATEMENT_LIST -> LOOP SEMI_COL
Rule 4     STATEMENT_LIST -> LOOP
Rule 5     STATEMENT_LIST -> STATEMENT error
Rule 6     STATEMENT_LIST -> STATEMENT SEMI_COL
Rule 7     STATEMENT_LIST -> STATEMENT SEMI_COL STATEMENT_LIST
Rule 8     STATEMENT -> FUNCTIONAL
Rule 9     STATEMENT -> EXPRESSION
Rule 10    STATEMENT -> ASSIGNMENT
Rule 11    ASSIGNMENT -> ID ASSIGN EXPRESSION COMMA ASSIGNMENT
Rule 12    ASSIGNMENT -> ID ASSIGN EXPRESSION
Rule 13    LOOP -> WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
Rule 14    CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
Rule 15    CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
Rule 16    CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
Rule 17    FUNCTIONAL -> FUNCTION_CALL
Rule 18    FUNCTIONAL -> FUNCTION_DEFINITION
Rule 19    FUNCTION_DEFINITION -> FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY
Rule 20    PARAM_LIST -> ID COMMA PARAM_LIST
Rule 21    PARAM_LIST -> ID
Rule 22    PARAM_LIST -> EMPTY
Rule 23    FUNCTION_CALL -> ID LPAREN VALUE_LIST RPAREN
Rule 24    VALUE_LIST -> EXPRESSION COMMA VALUE_LIST
Rule 25    VALUE_LIST -> EXPRESSION
Rule 26    VALUE_LIST -> EMPTY
Rule 27    EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION  [precedence=left, level=1]
Rule 28    EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION  [precedence=left, level=1]
Rule 29    EXPRESSION -> EXPRESSION EXPONENT EXPRESSION  [precedence=right, level=5]
Rule 30    EXPRESSION -> EXPRESSION MOD EXPRESSION  [precedence=left, level=3]
Rule 31    EXPRESSION -> EXPRESSION DIVIDE EXPRESSION  [precedence=left, level=3]
Rule 32    EXPRESSION -> EXPRESSION TIMES EXPRESSION  [precedence=left, level=3]
Rule 33    EXPRESSION -> EXPRESSION MINUS EXPRESSION  [precedence=left, level=2]
Rule 34    EXPRESSION -> EXPRESSION PLUS EXPRESSION  [precedence=left, level=2]
Rule 35    EXPRESSION -> MINUS EXPRESSION  [precedence=right, level=4]
Rule 36    EXPRESSION -> LPAREN EXPRESSION RPAREN
Rule 37    EXPRESSION -> ID
Rule 38    EXPRESSION -> NUMBER
Rule 39    EMPTY -> <empty>

Unused terminals:

    OR
    LOWER_THAN
    GREATER_THAN
    BITWISE_AND
    GREATER_THAN_EQ
    BITWISE_OR
    LOWER_THAN_EQ
    AND

Terminals, with rules where they appear:

AND                  : 
ASSIGN               : 11 12
BITWISE_AND          : 
BITWISE_OR           : 
COMMA                : 11 20 24
DIVIDE               : 31
ELSE                 : 14 15
EXPONENT             : 29
FUNCTION             : 19
GREATER_THAN         : 
GREATER_THAN_EQ      : 
ID                   : 11 12 19 20 21 23 37
IF                   : 14 15 16
IS_EQUAL             : 28
IS_NOT_EQUAL         : 27
LCURLY               : 13 14 15 15 16 19
LOWER_THAN           : 
LOWER_THAN_EQ        : 
LPAREN               : 13 14 15 16 19 23 36
MINUS                : 33 35
MOD                  : 30
NUMBER               : 38
OR                   : 
PLUS                 : 34
RCURLY               : 13 14 15 15 16 19
RPAREN               : 13 14 15 16 19 23 36
SEMI_COL             : 1 3 6 7
TIMES                : 32
WHILE                : 13
error                : 5

Nonterminals, with rules where they appear:

ASSIGNMENT           : 10 11
CONDITIONAL          : 1 2 14
EMPTY                : 22 26
EXPRESSION           : 9 11 12 13 14 15 16 24 25 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 36
FUNCTIONAL           : 8
FUNCTION_CALL        : 17
FUNCTION_DEFINITION  : 18
LOOP                 : 3 4
PARAM_LIST           : 19 20
STATEMENT            : 5 6 7
STATEMENT_LIST       : 7 13 14 15 15 16 19 0
VALUE_LIST           : 23 24


state 0

    (0) S' -> . STATEMENT_LIST
    (1) STATEMENT_LIST -> . CONDITIONAL SEMI_COL
    (2) STATEMENT_LIST -> . CONDITIONAL
    (3) STATEMENT_LIST -> . LOOP SEMI_COL
    (4) STATEMENT_LIST -> . LOOP
    (5) STATEMENT_LIST -> . STATEMENT error
    (6) STATEMENT_LIST -> . STATEMENT SEMI_COL
    (7) STATEMENT_LIST -> . STATEMENT SEMI_COL STATEMENT_LIST
    (14) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (13) LOOP -> . WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (8) STATEMENT -> . FUNCTIONAL
    (9) STATEMENT -> . EXPRESSION
    (10) STATEMENT -> . ASSIGNMENT
    (17) FUNCTIONAL -> . FUNCTION_CALL
    (18) FUNCTIONAL -> . FUNCTION_DEFINITION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    (11) ASSIGNMENT -> . ID ASSIGN EXPRESSION COMMA ASSIGNMENT
    (12) ASSIGNMENT -> . ID ASSIGN EXPRESSION
    (23) FUNCTION_CALL -> . ID LPAREN VALUE_LIST RPAREN
    (19) FUNCTION_DEFINITION -> . FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY
    IF              shift and go to state 5
    WHILE           shift and go to state 8
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 14
    NUMBER          shift and go to state 15
    FUNCTION        shift and go to state 16

    STATEMENT_LIST                 shift and go to state 1
    CONDITIONAL                    shift and go to state 2
    LOOP                           shift and go to state 3
    STATEMENT                      shift and go to state 4
    EXPRESSION                     shift and go to state 7
    FUNCTIONAL                     shift and go to state 9
    ASSIGNMENT                     shift and go to state 10
    FUNCTION_CALL                  shift and go to state 11
    FUNCTION_DEFINITION            shift and go to state 12

state 1

    (0) S' -> STATEMENT_LIST .


state 2

    (1) STATEMENT_LIST -> CONDITIONAL . SEMI_COL
    (2) STATEMENT_LIST -> CONDITIONAL .
    SEMI_COL        shift and go to state 17
    $end            reduce using rule 2 (STATEMENT_LIST -> CONDITIONAL .)
    RCURLY          reduce using rule 2 (STATEMENT_LIST -> CONDITIONAL .)


state 3

    (3) STATEMENT_LIST -> LOOP . SEMI_COL
    (4) STATEMENT_LIST -> LOOP .
    SEMI_COL        shift and go to state 18
    $end            reduce using rule 4 (STATEMENT_LIST -> LOOP .)
    RCURLY          reduce using rule 4 (STATEMENT_LIST -> LOOP .)


state 4

    (5) STATEMENT_LIST -> STATEMENT . error
    (6) STATEMENT_LIST -> STATEMENT . SEMI_COL
    (7) STATEMENT_LIST -> STATEMENT . SEMI_COL STATEMENT_LIST
    error           shift and go to state 19
    SEMI_COL        shift and go to state 20


state 5

    (14) CONDITIONAL -> IF . LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> IF . LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> IF . LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    LPAREN          shift and go to state 21


state 6

    (36) EXPRESSION -> LPAREN . EXPRESSION RPAREN
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 22

state 7

    (9) STATEMENT -> EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    error           reduce using rule 9 (STATEMENT -> EXPRESSION .)
    SEMI_COL        reduce using rule 9 (STATEMENT -> EXPRESSION .)
    IS_NOT_EQUAL    shift and go to state 24
    IS_EQUAL        shift and go to state 25
    EXPONENT        shift and go to state 26
    MOD             shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29
    MINUS           shift and go to state 30
    PLUS            shift and go to state 31


state 8

    (13) LOOP -> WHILE . LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    LPAREN          shift and go to state 32


state 9

    (8) STATEMENT -> FUNCTIONAL .
    error           reduce using rule 8 (STATEMENT -> FUNCTIONAL .)
    SEMI_COL        reduce using rule 8 (STATEMENT -> FUNCTIONAL .)


state 10

    (10) STATEMENT -> ASSIGNMENT .
    error           reduce using rule 10 (STATEMENT -> ASSIGNMENT .)
    SEMI_COL        reduce using rule 10 (STATEMENT -> ASSIGNMENT .)


state 11

    (17) FUNCTIONAL -> FUNCTION_CALL .
    error           reduce using rule 17 (FUNCTIONAL -> FUNCTION_CALL .)
    SEMI_COL        reduce using rule 17 (FUNCTIONAL -> FUNCTION_CALL .)


state 12

    (18) FUNCTIONAL -> FUNCTION_DEFINITION .
    error           reduce using rule 18 (FUNCTIONAL -> FUNCTION_DEFINITION .)
    SEMI_COL        reduce using rule 18 (FUNCTIONAL -> FUNCTION_DEFINITION .)


state 13

    (35) EXPRESSION -> MINUS . EXPRESSION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 33

state 14

    (37) EXPRESSION -> ID .
    (11) ASSIGNMENT -> ID . ASSIGN EXPRESSION COMMA ASSIGNMENT
    (12) ASSIGNMENT -> ID . ASSIGN EXPRESSION
    (23) FUNCTION_CALL -> ID . LPAREN VALUE_LIST RPAREN
    IS_NOT_EQUAL    reduce using rule 37 (EXPRESSION -> ID .)
    IS_EQUAL        reduce using rule 37 (EXPRESSION -> ID .)
    EXPONENT        reduce using rule 37 (EXPRESSION -> ID .)
    MOD             reduce using rule 37 (EXPRESSION -> ID .)
    DIVIDE          reduce using rule 37 (EXPRESSION -> ID .)
    TIMES           reduce using rule 37 (EXPRESSION -> ID .)
    MINUS           reduce using rule 37 (EXPRESSION -> ID .)
    PLUS            reduce using rule 37 (EXPRESSION -> ID .)
    error           reduce using rule 37 (EXPRESSION -> ID .)
    SEMI_COL        reduce using rule 37 (EXPRESSION -> ID .)
    ASSIGN          shift and go to state 34
    LPAREN          shift and go to state 35


state 15

    (38) EXPRESSION -> NUMBER .
    IS_NOT_EQUAL    reduce using rule 38 (EXPRESSION -> NUMBER .)
    IS_EQUAL        reduce using rule 38 (EXPRESSION -> NUMBER .)
    EXPONENT        reduce using rule 38 (EXPRESSION -> NUMBER .)
    MOD             reduce using rule 38 (EXPRESSION -> NUMBER .)
    DIVIDE          reduce using rule 38 (EXPRESSION -> NUMBER .)
    TIMES           reduce using rule 38 (EXPRESSION -> NUMBER .)
    MINUS           reduce using rule 38 (EXPRESSION -> NUMBER .)
    PLUS            reduce using rule 38 (EXPRESSION -> NUMBER .)
    error           reduce using rule 38 (EXPRESSION -> NUMBER .)
    SEMI_COL        reduce using rule 38 (EXPRESSION -> NUMBER .)
    RPAREN          reduce using rule 38 (EXPRESSION -> NUMBER .)
    COMMA           reduce using rule 38 (EXPRESSION -> NUMBER .)


state 16

    (19) FUNCTION_DEFINITION -> FUNCTION . ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY
    ID              shift and go to state 36


state 17

    (1) STATEMENT_LIST -> CONDITIONAL SEMI_COL .
    $end            reduce using rule 1 (STATEMENT_LIST -> CONDITIONAL SEMI_COL .)
    RCURLY          reduce using rule 1 (STATEMENT_LIST -> CONDITIONAL SEMI_COL .)


state 18

    (3) STATEMENT_LIST -> LOOP SEMI_COL .
    $end            reduce using rule 3 (STATEMENT_LIST -> LOOP SEMI_COL .)
    RCURLY          reduce using rule 3 (STATEMENT_LIST -> LOOP SEMI_COL .)


state 19

    (5) STATEMENT_LIST -> STATEMENT error .
    $end            reduce using rule 5 (STATEMENT_LIST -> STATEMENT error .)
    RCURLY          reduce using rule 5 (STATEMENT_LIST -> STATEMENT error .)


state 20

    (6) STATEMENT_LIST -> STATEMENT SEMI_COL .
    (7) STATEMENT_LIST -> STATEMENT SEMI_COL . STATEMENT_LIST
    (1) STATEMENT_LIST -> . CONDITIONAL SEMI_COL
    (2) STATEMENT_LIST -> . CONDITIONAL
    (3) STATEMENT_LIST -> . LOOP SEMI_COL
    (4) STATEMENT_LIST -> . LOOP
    (5) STATEMENT_LIST -> . STATEMENT error
    (6) STATEMENT_LIST -> . STATEMENT SEMI_COL
    (7) STATEMENT_LIST -> . STATEMENT SEMI_COL STATEMENT_LIST
    (14) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (13) LOOP -> . WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (8) STATEMENT -> . FUNCTIONAL
    (9) STATEMENT -> . EXPRESSION
    (10) STATEMENT -> . ASSIGNMENT
    (17) FUNCTIONAL -> . FUNCTION_CALL
    (18) FUNCTIONAL -> . FUNCTION_DEFINITION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    (11) ASSIGNMENT -> . ID ASSIGN EXPRESSION COMMA ASSIGNMENT
    (12) ASSIGNMENT -> . ID ASSIGN EXPRESSION
    (23) FUNCTION_CALL -> . ID LPAREN VALUE_LIST RPAREN
    (19) FUNCTION_DEFINITION -> . FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY
    $end            reduce using rule 6 (STATEMENT_LIST -> STATEMENT SEMI_COL .)
    RCURLY          reduce using rule 6 (STATEMENT_LIST -> STATEMENT SEMI_COL .)
    IF              shift and go to state 5
    WHILE           shift and go to state 8
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 14
    NUMBER          shift and go to state 15
    FUNCTION        shift and go to state 16

    STATEMENT                      shift and go to state 4
    STATEMENT_LIST                 shift and go to state 37
    CONDITIONAL                    shift and go to state 2
    LOOP                           shift and go to state 3
    EXPRESSION                     shift and go to state 7
    FUNCTIONAL                     shift and go to state 9
    ASSIGNMENT                     shift and go to state 10
    FUNCTION_CALL                  shift and go to state 11
    FUNCTION_DEFINITION            shift and go to state 12

state 21

    (14) CONDITIONAL -> IF LPAREN . EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> IF LPAREN . EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> IF LPAREN . EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 38

state 22

    (36) EXPRESSION -> LPAREN EXPRESSION . RPAREN
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    RPAREN          shift and go to state 39
    IS_NOT_EQUAL    shift and go to state 24
    IS_EQUAL        shift and go to state 25
    EXPONENT        shift and go to state 26
    MOD             shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29
    MINUS           shift and go to state 30
    PLUS            shift and go to state 31


state 23

    (37) EXPRESSION -> ID .
    RPAREN          reduce using rule 37 (EXPRESSION -> ID .)
    IS_NOT_EQUAL    reduce using rule 37 (EXPRESSION -> ID .)
    IS_EQUAL        reduce using rule 37 (EXPRESSION -> ID .)
    EXPONENT        reduce using rule 37 (EXPRESSION -> ID .)
    MOD             reduce using rule 37 (EXPRESSION -> ID .)
    DIVIDE          reduce using rule 37 (EXPRESSION -> ID .)
    TIMES           reduce using rule 37 (EXPRESSION -> ID .)
    MINUS           reduce using rule 37 (EXPRESSION -> ID .)
    PLUS            reduce using rule 37 (EXPRESSION -> ID .)
    error           reduce using rule 37 (EXPRESSION -> ID .)
    SEMI_COL        reduce using rule 37 (EXPRESSION -> ID .)
    COMMA           reduce using rule 37 (EXPRESSION -> ID .)


state 24

    (27) EXPRESSION -> EXPRESSION IS_NOT_EQUAL . EXPRESSION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 40

state 25

    (28) EXPRESSION -> EXPRESSION IS_EQUAL . EXPRESSION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 41

state 26

    (29) EXPRESSION -> EXPRESSION EXPONENT . EXPRESSION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 42

state 27

    (30) EXPRESSION -> EXPRESSION MOD . EXPRESSION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 43

state 28

    (31) EXPRESSION -> EXPRESSION DIVIDE . EXPRESSION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 44

state 29

    (32) EXPRESSION -> EXPRESSION TIMES . EXPRESSION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 45

state 30

    (33) EXPRESSION -> EXPRESSION MINUS . EXPRESSION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 46

state 31

    (34) EXPRESSION -> EXPRESSION PLUS . EXPRESSION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 47

state 32

    (13) LOOP -> WHILE LPAREN . EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 48

state 33

    (35) EXPRESSION -> MINUS EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    IS_EQUAL        reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    MOD             reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    DIVIDE          reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    TIMES           reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    MINUS           reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    PLUS            reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    error           reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    SEMI_COL        reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    RPAREN          reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    COMMA           reduce using rule 35 (EXPRESSION -> MINUS EXPRESSION .)
    EXPONENT        shift and go to state 26


state 34

    (11) ASSIGNMENT -> ID ASSIGN . EXPRESSION COMMA ASSIGNMENT
    (12) ASSIGNMENT -> ID ASSIGN . EXPRESSION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15

    EXPRESSION                     shift and go to state 49

state 35

    (23) FUNCTION_CALL -> ID LPAREN . VALUE_LIST RPAREN
    (24) VALUE_LIST -> . EXPRESSION COMMA VALUE_LIST
    (25) VALUE_LIST -> . EXPRESSION
    (26) VALUE_LIST -> . EMPTY
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    (39) EMPTY -> .
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15
    RPAREN          reduce using rule 39 (EMPTY -> .)

    VALUE_LIST                     shift and go to state 50
    EXPRESSION                     shift and go to state 51
    EMPTY                          shift and go to state 52

state 36

    (19) FUNCTION_DEFINITION -> FUNCTION ID . LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY
    LPAREN          shift and go to state 53


state 37

    (7) STATEMENT_LIST -> STATEMENT SEMI_COL STATEMENT_LIST .
    $end            reduce using rule 7 (STATEMENT_LIST -> STATEMENT SEMI_COL STATEMENT_LIST .)
    RCURLY          reduce using rule 7 (STATEMENT_LIST -> STATEMENT SEMI_COL STATEMENT_LIST .)


state 38

    (14) CONDITIONAL -> IF LPAREN EXPRESSION . RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> IF LPAREN EXPRESSION . RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> IF LPAREN EXPRESSION . RPAREN LCURLY STATEMENT_LIST RCURLY
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    RPAREN          shift and go to state 54
    IS_NOT_EQUAL    shift and go to state 24
    IS_EQUAL        shift and go to state 25
    EXPONENT        shift and go to state 26
    MOD             shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29
    MINUS           shift and go to state 30
    PLUS            shift and go to state 31


state 39

    (36) EXPRESSION -> LPAREN EXPRESSION RPAREN .
    IS_NOT_EQUAL    reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    IS_EQUAL        reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    EXPONENT        reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    MOD             reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    DIVIDE          reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    TIMES           reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    MINUS           reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    PLUS            reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    error           reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    SEMI_COL        reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    RPAREN          reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    COMMA           reduce using rule 36 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)


state 40

    (27) EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 27 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    IS_EQUAL        reduce using rule 27 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    error           reduce using rule 27 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    SEMI_COL        reduce using rule 27 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    RPAREN          reduce using rule 27 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    COMMA           reduce using rule 27 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    EXPONENT        shift and go to state 26
    MOD             shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29
    MINUS           shift and go to state 30
    PLUS            shift and go to state 31


state 41

    (28) EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 28 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    IS_EQUAL        reduce using rule 28 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    error           reduce using rule 28 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    SEMI_COL        reduce using rule 28 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    RPAREN          reduce using rule 28 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    COMMA           reduce using rule 28 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    EXPONENT        shift and go to state 26
    MOD             shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29
    MINUS           shift and go to state 30
    PLUS            shift and go to state 31


state 42

    (29) EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    IS_EQUAL        reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    MOD             reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    DIVIDE          reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    TIMES           reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    MINUS           reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    PLUS            reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    error           reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    SEMI_COL        reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    RPAREN          reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    COMMA           reduce using rule 29 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    EXPONENT        shift and go to state 26


state 43

    (30) EXPRESSION -> EXPRESSION MOD EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    IS_EQUAL        reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    MOD             reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    DIVIDE          reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    TIMES           reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    MINUS           reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    PLUS            reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    error           reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    SEMI_COL        reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    RPAREN          reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    COMMA           reduce using rule 30 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    EXPONENT        shift and go to state 26


state 44

    (31) EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    IS_EQUAL        reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    MOD             reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    DIVIDE          reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    TIMES           reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    MINUS           reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    PLUS            reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    error           reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    SEMI_COL        reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    RPAREN          reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    COMMA           reduce using rule 31 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    EXPONENT        shift and go to state 26


state 45

    (32) EXPRESSION -> EXPRESSION TIMES EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    IS_EQUAL        reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    MOD             reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    DIVIDE          reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    TIMES           reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    MINUS           reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    PLUS            reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    error           reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    SEMI_COL        reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    RPAREN          reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    COMMA           reduce using rule 32 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    EXPONENT        shift and go to state 26


state 46

    (33) EXPRESSION -> EXPRESSION MINUS EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 33 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    IS_EQUAL        reduce using rule 33 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    MINUS           reduce using rule 33 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    PLUS            reduce using rule 33 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    error           reduce using rule 33 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    SEMI_COL        reduce using rule 33 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    RPAREN          reduce using rule 33 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    COMMA           reduce using rule 33 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    EXPONENT        shift and go to state 26
    MOD             shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29


state 47

    (34) EXPRESSION -> EXPRESSION PLUS EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 34 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    IS_EQUAL        reduce using rule 34 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    MINUS           reduce using rule 34 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    PLUS            reduce using rule 34 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    error           reduce using rule 34 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    SEMI_COL        reduce using rule 34 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    RPAREN          reduce using rule 34 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    COMMA           reduce using rule 34 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    EXPONENT        shift and go to state 26
    MOD             shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29


state 48

    (13) LOOP -> WHILE LPAREN EXPRESSION . RPAREN LCURLY STATEMENT_LIST RCURLY
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    RPAREN          shift and go to state 55
    IS_NOT_EQUAL    shift and go to state 24
    IS_EQUAL        shift and go to state 25
    EXPONENT        shift and go to state 26
    MOD             shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29
    MINUS           shift and go to state 30
    PLUS            shift and go to state 31


state 49

    (11) ASSIGNMENT -> ID ASSIGN EXPRESSION . COMMA ASSIGNMENT
    (12) ASSIGNMENT -> ID ASSIGN EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    COMMA           shift and go to state 56
    error           reduce using rule 12 (ASSIGNMENT -> ID ASSIGN EXPRESSION .)
    SEMI_COL        reduce using rule 12 (ASSIGNMENT -> ID ASSIGN EXPRESSION .)
    IS_NOT_EQUAL    shift and go to state 24
    IS_EQUAL        shift and go to state 25
    EXPONENT        shift and go to state 26
    MOD             shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29
    MINUS           shift and go to state 30
    PLUS            shift and go to state 31


state 50

    (23) FUNCTION_CALL -> ID LPAREN VALUE_LIST . RPAREN
    RPAREN          shift and go to state 57


state 51

    (24) VALUE_LIST -> EXPRESSION . COMMA VALUE_LIST
    (25) VALUE_LIST -> EXPRESSION .
    (27) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (29) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (30) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (31) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (32) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (33) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (34) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    COMMA           shift and go to state 58
    RPAREN          reduce using rule 25 (VALUE_LIST -> EXPRESSION .)
    IS_NOT_EQUAL    shift and go to state 24
    IS_EQUAL        shift and go to state 25
    EXPONENT        shift and go to state 26
    MOD             shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29
    MINUS           shift and go to state 30
    PLUS            shift and go to state 31


state 52

    (26) VALUE_LIST -> EMPTY .
    RPAREN          reduce using rule 26 (VALUE_LIST -> EMPTY .)


state 53

    (19) FUNCTION_DEFINITION -> FUNCTION ID LPAREN . PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY
    (20) PARAM_LIST -> . ID COMMA PARAM_LIST
    (21) PARAM_LIST -> . ID
    (22) PARAM_LIST -> . EMPTY
    (39) EMPTY -> .
    ID              shift and go to state 59
    RPAREN          reduce using rule 39 (EMPTY -> .)

    PARAM_LIST                     shift and go to state 60
    EMPTY                          shift and go to state 61

state 54

    (14) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN . LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN . LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN . LCURLY STATEMENT_LIST RCURLY
    LCURLY          shift and go to state 62


state 55

    (13) LOOP -> WHILE LPAREN EXPRESSION RPAREN . LCURLY STATEMENT_LIST RCURLY
    LCURLY          shift and go to state 63


state 56

    (11) ASSIGNMENT -> ID ASSIGN EXPRESSION COMMA . ASSIGNMENT
    (11) ASSIGNMENT -> . ID ASSIGN EXPRESSION COMMA ASSIGNMENT
    (12) ASSIGNMENT -> . ID ASSIGN EXPRESSION
    ID              shift and go to state 64

    ASSIGNMENT                     shift and go to state 65

state 57

    (23) FUNCTION_CALL -> ID LPAREN VALUE_LIST RPAREN .
    error           reduce using rule 23 (FUNCTION_CALL -> ID LPAREN VALUE_LIST RPAREN .)
    SEMI_COL        reduce using rule 23 (FUNCTION_CALL -> ID LPAREN VALUE_LIST RPAREN .)


state 58

    (24) VALUE_LIST -> EXPRESSION COMMA . VALUE_LIST
    (24) VALUE_LIST -> . EXPRESSION COMMA VALUE_LIST
    (25) VALUE_LIST -> . EXPRESSION
    (26) VALUE_LIST -> . EMPTY
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    (39) EMPTY -> .
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 23
    NUMBER          shift and go to state 15
    RPAREN          reduce using rule 39 (EMPTY -> .)

    EXPRESSION                     shift and go to state 51
    VALUE_LIST                     shift and go to state 66
    EMPTY                          shift and go to state 52

state 59

    (20) PARAM_LIST -> ID . COMMA PARAM_LIST
    (21) PARAM_LIST -> ID .
    COMMA           shift and go to state 67
    RPAREN          reduce using rule 21 (PARAM_LIST -> ID .)


state 60

    (19) FUNCTION_DEFINITION -> FUNCTION ID LPAREN PARAM_LIST . RPAREN LCURLY STATEMENT_LIST RCURLY
    RPAREN          shift and go to state 68


state 61

    (22) PARAM_LIST -> EMPTY .
    RPAREN          reduce using rule 22 (PARAM_LIST -> EMPTY .)


state 62

    (14) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY . STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY . STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY . STATEMENT_LIST RCURLY
    (1) STATEMENT_LIST -> . CONDITIONAL SEMI_COL
    (2) STATEMENT_LIST -> . CONDITIONAL
    (3) STATEMENT_LIST -> . LOOP SEMI_COL
    (4) STATEMENT_LIST -> . LOOP
    (5) STATEMENT_LIST -> . STATEMENT error
    (6) STATEMENT_LIST -> . STATEMENT SEMI_COL
    (7) STATEMENT_LIST -> . STATEMENT SEMI_COL STATEMENT_LIST
    (14) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (13) LOOP -> . WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (8) STATEMENT -> . FUNCTIONAL
    (9) STATEMENT -> . EXPRESSION
    (10) STATEMENT -> . ASSIGNMENT
    (17) FUNCTIONAL -> . FUNCTION_CALL
    (18) FUNCTIONAL -> . FUNCTION_DEFINITION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    (11) ASSIGNMENT -> . ID ASSIGN EXPRESSION COMMA ASSIGNMENT
    (12) ASSIGNMENT -> . ID ASSIGN EXPRESSION
    (23) FUNCTION_CALL -> . ID LPAREN VALUE_LIST RPAREN
    (19) FUNCTION_DEFINITION -> . FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY
    IF              shift and go to state 5
    WHILE           shift and go to state 8
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 14
    NUMBER          shift and go to state 15
    FUNCTION        shift and go to state 16

    EXPRESSION                     shift and go to state 7
    STATEMENT_LIST                 shift and go to state 69
    CONDITIONAL                    shift and go to state 2
    LOOP                           shift and go to state 3
    STATEMENT                      shift and go to state 4
    FUNCTIONAL                     shift and go to state 9
    ASSIGNMENT                     shift and go to state 10
    FUNCTION_CALL                  shift and go to state 11
    FUNCTION_DEFINITION            shift and go to state 12

state 63

    (13) LOOP -> WHILE LPAREN EXPRESSION RPAREN LCURLY . STATEMENT_LIST RCURLY
    (1) STATEMENT_LIST -> . CONDITIONAL SEMI_COL
    (2) STATEMENT_LIST -> . CONDITIONAL
    (3) STATEMENT_LIST -> . LOOP SEMI_COL
    (4) STATEMENT_LIST -> . LOOP
    (5) STATEMENT_LIST -> . STATEMENT error
    (6) STATEMENT_LIST -> . STATEMENT SEMI_COL
    (7) STATEMENT_LIST -> . STATEMENT SEMI_COL STATEMENT_LIST
    (14) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (13) LOOP -> . WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (8) STATEMENT -> . FUNCTIONAL
    (9) STATEMENT -> . EXPRESSION
    (10) STATEMENT -> . ASSIGNMENT
    (17) FUNCTIONAL -> . FUNCTION_CALL
    (18) FUNCTIONAL -> . FUNCTION_DEFINITION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    (11) ASSIGNMENT -> . ID ASSIGN EXPRESSION COMMA ASSIGNMENT
    (12) ASSIGNMENT -> . ID ASSIGN EXPRESSION
    (23) FUNCTION_CALL -> . ID LPAREN VALUE_LIST RPAREN
    (19) FUNCTION_DEFINITION -> . FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY
    IF              shift and go to state 5
    WHILE           shift and go to state 8
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 14
    NUMBER          shift and go to state 15
    FUNCTION        shift and go to state 16

    EXPRESSION                     shift and go to state 7
    STATEMENT_LIST                 shift and go to state 70
    CONDITIONAL                    shift and go to state 2
    LOOP                           shift and go to state 3
    STATEMENT                      shift and go to state 4
    FUNCTIONAL                     shift and go to state 9
    ASSIGNMENT                     shift and go to state 10
    FUNCTION_CALL                  shift and go to state 11
    FUNCTION_DEFINITION            shift and go to state 12

state 64

    (11) ASSIGNMENT -> ID . ASSIGN EXPRESSION COMMA ASSIGNMENT
    (12) ASSIGNMENT -> ID . ASSIGN EXPRESSION
    ASSIGN          shift and go to state 34


state 65

    (11) ASSIGNMENT -> ID ASSIGN EXPRESSION COMMA ASSIGNMENT .
    error           reduce using rule 11 (ASSIGNMENT -> ID ASSIGN EXPRESSION COMMA ASSIGNMENT .)
    SEMI_COL        reduce using rule 11 (ASSIGNMENT -> ID ASSIGN EXPRESSION COMMA ASSIGNMENT .)


state 66

    (24) VALUE_LIST -> EXPRESSION COMMA VALUE_LIST .
    RPAREN          reduce using rule 24 (VALUE_LIST -> EXPRESSION COMMA VALUE_LIST .)


state 67

    (20) PARAM_LIST -> ID COMMA . PARAM_LIST
    (20) PARAM_LIST -> . ID COMMA PARAM_LIST
    (21) PARAM_LIST -> . ID
    (22) PARAM_LIST -> . EMPTY
    (39) EMPTY -> .
    ID              shift and go to state 59
    RPAREN          reduce using rule 39 (EMPTY -> .)

    PARAM_LIST                     shift and go to state 71
    EMPTY                          shift and go to state 61

state 68

    (19) FUNCTION_DEFINITION -> FUNCTION ID LPAREN PARAM_LIST RPAREN . LCURLY STATEMENT_LIST RCURLY
    LCURLY          shift and go to state 72


state 69

    (14) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST . RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST . RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST . RCURLY
    RCURLY          shift and go to state 73


state 70

    (13) LOOP -> WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST . RCURLY
    RCURLY          shift and go to state 74


state 71

    (20) PARAM_LIST -> ID COMMA PARAM_LIST .
    RPAREN          reduce using rule 20 (PARAM_LIST -> ID COMMA PARAM_LIST .)


state 72

    (19) FUNCTION_DEFINITION -> FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY . STATEMENT_LIST RCURLY
    (1) STATEMENT_LIST -> . CONDITIONAL SEMI_COL
    (2) STATEMENT_LIST -> . CONDITIONAL
    (3) STATEMENT_LIST -> . LOOP SEMI_COL
    (4) STATEMENT_LIST -> . LOOP
    (5) STATEMENT_LIST -> . STATEMENT error
    (6) STATEMENT_LIST -> . STATEMENT SEMI_COL
    (7) STATEMENT_LIST -> . STATEMENT SEMI_COL STATEMENT_LIST
    (14) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (13) LOOP -> . WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (8) STATEMENT -> . FUNCTIONAL
    (9) STATEMENT -> . EXPRESSION
    (10) STATEMENT -> . ASSIGNMENT
    (17) FUNCTIONAL -> . FUNCTION_CALL
    (18) FUNCTIONAL -> . FUNCTION_DEFINITION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    (11) ASSIGNMENT -> . ID ASSIGN EXPRESSION COMMA ASSIGNMENT
    (12) ASSIGNMENT -> . ID ASSIGN EXPRESSION
    (23) FUNCTION_CALL -> . ID LPAREN VALUE_LIST RPAREN
    (19) FUNCTION_DEFINITION -> . FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY
    IF              shift and go to state 5
    WHILE           shift and go to state 8
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 14
    NUMBER          shift and go to state 15
    FUNCTION        shift and go to state 16

    STATEMENT_LIST                 shift and go to state 75
    CONDITIONAL                    shift and go to state 2
    LOOP                           shift and go to state 3
    STATEMENT                      shift and go to state 4
    EXPRESSION                     shift and go to state 7
    FUNCTIONAL                     shift and go to state 9
    ASSIGNMENT                     shift and go to state 10
    FUNCTION_CALL                  shift and go to state 11
    FUNCTION_DEFINITION            shift and go to state 12

state 73

    (14) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY . ELSE CONDITIONAL
    (15) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY . ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY .
    ELSE            shift and go to state 76
    SEMI_COL        reduce using rule 16 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY .)
    $end            reduce using rule 16 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY .)
    RCURLY          reduce using rule 16 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY .)


state 74

    (13) LOOP -> WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY .
    SEMI_COL        reduce using rule 13 (LOOP -> WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY .)
    $end            reduce using rule 13 (LOOP -> WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY .)
    RCURLY          reduce using rule 13 (LOOP -> WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY .)


state 75

    (19) FUNCTION_DEFINITION -> FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST . RCURLY
    RCURLY          shift and go to state 77


state 76

    (14) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE . CONDITIONAL
    (15) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE . LCURLY STATEMENT_LIST RCURLY
    (14) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    LCURLY          shift and go to state 78
    IF              shift and go to state 5

    CONDITIONAL                    shift and go to state 79

state 77

    (19) FUNCTION_DEFINITION -> FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY .
    error           reduce using rule 19 (FUNCTION_DEFINITION -> FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY .)
    SEMI_COL        reduce using rule 19 (FUNCTION_DEFINITION -> FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY .)


state 78

    (15) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY . STATEMENT_LIST RCURLY
    (1) STATEMENT_LIST -> . CONDITIONAL SEMI_COL
    (2) STATEMENT_LIST -> . CONDITIONAL
    (3) STATEMENT_LIST -> . LOOP SEMI_COL
    (4) STATEMENT_LIST -> . LOOP
    (5) STATEMENT_LIST -> . STATEMENT error
    (6) STATEMENT_LIST -> . STATEMENT SEMI_COL
    (7) STATEMENT_LIST -> . STATEMENT SEMI_COL STATEMENT_LIST
    (14) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL
    (15) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY
    (16) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (13) LOOP -> . WHILE LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY
    (8) STATEMENT -> . FUNCTIONAL
    (9) STATEMENT -> . EXPRESSION
    (10) STATEMENT -> . ASSIGNMENT
    (17) FUNCTIONAL -> . FUNCTION_CALL
    (18) FUNCTIONAL -> . FUNCTION_DEFINITION
    (27) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (28) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (29) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (30) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (31) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (32) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (33) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (34) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (35) EXPRESSION -> . MINUS EXPRESSION
    (36) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (37) EXPRESSION -> . ID
    (38) EXPRESSION -> . NUMBER
    (11) ASSIGNMENT -> . ID ASSIGN EXPRESSION COMMA ASSIGNMENT
    (12) ASSIGNMENT -> . ID ASSIGN EXPRESSION
    (23) FUNCTION_CALL -> . ID LPAREN VALUE_LIST RPAREN
    (19) FUNCTION_DEFINITION -> . FUNCTION ID LPAREN PARAM_LIST RPAREN LCURLY STATEMENT_LIST RCURLY
    IF              shift and go to state 5
    WHILE           shift and go to state 8
    MINUS           shift and go to state 13
    LPAREN          shift and go to state 6
    ID              shift and go to state 14
    NUMBER          shift and go to state 15
    FUNCTION        shift and go to state 16

    EXPRESSION                     shift and go to state 7
    STATEMENT_LIST                 shift and go to state 80
    CONDITIONAL                    shift and go to state 2
    LOOP                           shift and go to state 3
    STATEMENT                      shift and go to state 4
    FUNCTIONAL                     shift and go to state 9
    ASSIGNMENT                     shift and go to state 10
    FUNCTION_CALL                  shift and go to state 11
    FUNCTION_DEFINITION            shift and go to state 12

state 79

    (14) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL .
    SEMI_COL        reduce using rule 14 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL .)
    $end            reduce using rule 14 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL .)
    RCURLY          reduce using rule 14 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE CONDITIONAL .)


state 80

    (15) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST . RCURLY
    RCURLY          shift and go to state 81


state 81

    (15) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY .
    SEMI_COL        reduce using rule 15 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY .)
    $end            reduce using rule 15 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY .)
    RCURLY          reduce using rule 15 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT_LIST RCURLY ELSE LCURLY STATEMENT_LIST RCURLY .)
