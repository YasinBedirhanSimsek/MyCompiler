Grammar:

Rule 0     S' -> STATEMENT
Rule 1     STATEMENT -> CONDITIONAL
Rule 2     STATEMENT -> EXPRESSION
Rule 3     STATEMENT -> ASSIGNMENT
Rule 4     ASSIGNMENT -> ID ASSIGN EXPRESSION
Rule 5     CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL
Rule 6     CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY
Rule 7     CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY
Rule 8     EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION  [precedence=left, level=1]
Rule 9     EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION  [precedence=left, level=1]
Rule 10    EXPRESSION -> EXPRESSION EXPONENT EXPRESSION  [precedence=right, level=5]
Rule 11    EXPRESSION -> EXPRESSION MOD EXPRESSION  [precedence=left, level=3]
Rule 12    EXPRESSION -> EXPRESSION DIVIDE EXPRESSION  [precedence=left, level=3]
Rule 13    EXPRESSION -> EXPRESSION TIMES EXPRESSION  [precedence=left, level=3]
Rule 14    EXPRESSION -> EXPRESSION MINUS EXPRESSION  [precedence=left, level=2]
Rule 15    EXPRESSION -> EXPRESSION PLUS EXPRESSION  [precedence=left, level=2]
Rule 16    EXPRESSION -> MINUS EXPRESSION  [precedence=right, level=4]
Rule 17    EXPRESSION -> LPAREN EXPRESSION RPAREN
Rule 18    EXPRESSION -> ID
Rule 19    EXPRESSION -> NUMBER

Unused terminals:

    BITWISE_OR
    BITWISE_AND
    AND
    GREATER_THAN
    GREATER_THAN_EQ
    OR
    LOWER_THAN_EQ
    LOWER_THAN

Terminals, with rules where they appear:

AND                  : 
ASSIGN               : 4
BITWISE_AND          : 
BITWISE_OR           : 
DIVIDE               : 12
ELSE                 : 5 6
EXPONENT             : 10
GREATER_THAN         : 
GREATER_THAN_EQ      : 
ID                   : 4 18
IF                   : 5 6 7
IS_EQUAL             : 9
IS_NOT_EQUAL         : 8
LCURLY               : 5 6 6 7
LOWER_THAN           : 
LOWER_THAN_EQ        : 
LPAREN               : 5 6 7 17
MINUS                : 14 16
MOD                  : 11
NUMBER               : 19
OR                   : 
PLUS                 : 15
RCURLY               : 5 6 6 7
RPAREN               : 5 6 7 17
TIMES                : 13
error                : 

Nonterminals, with rules where they appear:

ASSIGNMENT           : 3
CONDITIONAL          : 1 5
EXPRESSION           : 2 4 5 6 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 17
STATEMENT            : 5 6 6 7 0


state 0

    (0) S' -> . STATEMENT
    (1) STATEMENT -> . CONDITIONAL
    (2) STATEMENT -> . EXPRESSION
    (3) STATEMENT -> . ASSIGNMENT
    (5) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL
    (6) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    (4) ASSIGNMENT -> . ID ASSIGN EXPRESSION
    IF              shift and go to state 5
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 8
    NUMBER          shift and go to state 9

    STATEMENT                      shift and go to state 1
    CONDITIONAL                    shift and go to state 2
    EXPRESSION                     shift and go to state 3
    ASSIGNMENT                     shift and go to state 4

state 1

    (0) S' -> STATEMENT .


state 2

    (1) STATEMENT -> CONDITIONAL .
    $end            reduce using rule 1 (STATEMENT -> CONDITIONAL .)
    RCURLY          reduce using rule 1 (STATEMENT -> CONDITIONAL .)


state 3

    (2) STATEMENT -> EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    $end            reduce using rule 2 (STATEMENT -> EXPRESSION .)
    RCURLY          reduce using rule 2 (STATEMENT -> EXPRESSION .)
    IS_NOT_EQUAL    shift and go to state 10
    IS_EQUAL        shift and go to state 11
    EXPONENT        shift and go to state 12
    MOD             shift and go to state 13
    DIVIDE          shift and go to state 14
    TIMES           shift and go to state 15
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17


state 4

    (3) STATEMENT -> ASSIGNMENT .
    $end            reduce using rule 3 (STATEMENT -> ASSIGNMENT .)
    RCURLY          reduce using rule 3 (STATEMENT -> ASSIGNMENT .)


state 5

    (5) CONDITIONAL -> IF . LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL
    (6) CONDITIONAL -> IF . LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> IF . LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY
    LPAREN          shift and go to state 18


state 6

    (17) EXPRESSION -> LPAREN . EXPRESSION RPAREN
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 19

state 7

    (16) EXPRESSION -> MINUS . EXPRESSION
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 21

state 8

    (18) EXPRESSION -> ID .
    (4) ASSIGNMENT -> ID . ASSIGN EXPRESSION
    IS_NOT_EQUAL    reduce using rule 18 (EXPRESSION -> ID .)
    IS_EQUAL        reduce using rule 18 (EXPRESSION -> ID .)
    EXPONENT        reduce using rule 18 (EXPRESSION -> ID .)
    MOD             reduce using rule 18 (EXPRESSION -> ID .)
    DIVIDE          reduce using rule 18 (EXPRESSION -> ID .)
    TIMES           reduce using rule 18 (EXPRESSION -> ID .)
    MINUS           reduce using rule 18 (EXPRESSION -> ID .)
    PLUS            reduce using rule 18 (EXPRESSION -> ID .)
    $end            reduce using rule 18 (EXPRESSION -> ID .)
    RCURLY          reduce using rule 18 (EXPRESSION -> ID .)
    ASSIGN          shift and go to state 22


state 9

    (19) EXPRESSION -> NUMBER .
    IS_NOT_EQUAL    reduce using rule 19 (EXPRESSION -> NUMBER .)
    IS_EQUAL        reduce using rule 19 (EXPRESSION -> NUMBER .)
    EXPONENT        reduce using rule 19 (EXPRESSION -> NUMBER .)
    MOD             reduce using rule 19 (EXPRESSION -> NUMBER .)
    DIVIDE          reduce using rule 19 (EXPRESSION -> NUMBER .)
    TIMES           reduce using rule 19 (EXPRESSION -> NUMBER .)
    MINUS           reduce using rule 19 (EXPRESSION -> NUMBER .)
    PLUS            reduce using rule 19 (EXPRESSION -> NUMBER .)
    $end            reduce using rule 19 (EXPRESSION -> NUMBER .)
    RPAREN          reduce using rule 19 (EXPRESSION -> NUMBER .)
    RCURLY          reduce using rule 19 (EXPRESSION -> NUMBER .)


state 10

    (8) EXPRESSION -> EXPRESSION IS_NOT_EQUAL . EXPRESSION
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 23

state 11

    (9) EXPRESSION -> EXPRESSION IS_EQUAL . EXPRESSION
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 24

state 12

    (10) EXPRESSION -> EXPRESSION EXPONENT . EXPRESSION
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 25

state 13

    (11) EXPRESSION -> EXPRESSION MOD . EXPRESSION
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 26

state 14

    (12) EXPRESSION -> EXPRESSION DIVIDE . EXPRESSION
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 27

state 15

    (13) EXPRESSION -> EXPRESSION TIMES . EXPRESSION
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 28

state 16

    (14) EXPRESSION -> EXPRESSION MINUS . EXPRESSION
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 29

state 17

    (15) EXPRESSION -> EXPRESSION PLUS . EXPRESSION
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 30

state 18

    (5) CONDITIONAL -> IF LPAREN . EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL
    (6) CONDITIONAL -> IF LPAREN . EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> IF LPAREN . EXPRESSION RPAREN LCURLY STATEMENT RCURLY
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 31

state 19

    (17) EXPRESSION -> LPAREN EXPRESSION . RPAREN
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    RPAREN          shift and go to state 32
    IS_NOT_EQUAL    shift and go to state 10
    IS_EQUAL        shift and go to state 11
    EXPONENT        shift and go to state 12
    MOD             shift and go to state 13
    DIVIDE          shift and go to state 14
    TIMES           shift and go to state 15
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17


state 20

    (18) EXPRESSION -> ID .
    RPAREN          reduce using rule 18 (EXPRESSION -> ID .)
    IS_NOT_EQUAL    reduce using rule 18 (EXPRESSION -> ID .)
    IS_EQUAL        reduce using rule 18 (EXPRESSION -> ID .)
    EXPONENT        reduce using rule 18 (EXPRESSION -> ID .)
    MOD             reduce using rule 18 (EXPRESSION -> ID .)
    DIVIDE          reduce using rule 18 (EXPRESSION -> ID .)
    TIMES           reduce using rule 18 (EXPRESSION -> ID .)
    MINUS           reduce using rule 18 (EXPRESSION -> ID .)
    PLUS            reduce using rule 18 (EXPRESSION -> ID .)
    $end            reduce using rule 18 (EXPRESSION -> ID .)
    RCURLY          reduce using rule 18 (EXPRESSION -> ID .)


state 21

    (16) EXPRESSION -> MINUS EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 16 (EXPRESSION -> MINUS EXPRESSION .)
    IS_EQUAL        reduce using rule 16 (EXPRESSION -> MINUS EXPRESSION .)
    MOD             reduce using rule 16 (EXPRESSION -> MINUS EXPRESSION .)
    DIVIDE          reduce using rule 16 (EXPRESSION -> MINUS EXPRESSION .)
    TIMES           reduce using rule 16 (EXPRESSION -> MINUS EXPRESSION .)
    MINUS           reduce using rule 16 (EXPRESSION -> MINUS EXPRESSION .)
    PLUS            reduce using rule 16 (EXPRESSION -> MINUS EXPRESSION .)
    $end            reduce using rule 16 (EXPRESSION -> MINUS EXPRESSION .)
    RPAREN          reduce using rule 16 (EXPRESSION -> MINUS EXPRESSION .)
    RCURLY          reduce using rule 16 (EXPRESSION -> MINUS EXPRESSION .)
    EXPONENT        shift and go to state 12


state 22

    (4) ASSIGNMENT -> ID ASSIGN . EXPRESSION
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 20
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 33

state 23

    (8) EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 8 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    IS_EQUAL        reduce using rule 8 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    $end            reduce using rule 8 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    RPAREN          reduce using rule 8 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    RCURLY          reduce using rule 8 (EXPRESSION -> EXPRESSION IS_NOT_EQUAL EXPRESSION .)
    EXPONENT        shift and go to state 12
    MOD             shift and go to state 13
    DIVIDE          shift and go to state 14
    TIMES           shift and go to state 15
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17


state 24

    (9) EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 9 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    IS_EQUAL        reduce using rule 9 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    $end            reduce using rule 9 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    RPAREN          reduce using rule 9 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    RCURLY          reduce using rule 9 (EXPRESSION -> EXPRESSION IS_EQUAL EXPRESSION .)
    EXPONENT        shift and go to state 12
    MOD             shift and go to state 13
    DIVIDE          shift and go to state 14
    TIMES           shift and go to state 15
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17


state 25

    (10) EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 10 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    IS_EQUAL        reduce using rule 10 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    MOD             reduce using rule 10 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    DIVIDE          reduce using rule 10 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    TIMES           reduce using rule 10 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    MINUS           reduce using rule 10 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    PLUS            reduce using rule 10 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    $end            reduce using rule 10 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    RPAREN          reduce using rule 10 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    RCURLY          reduce using rule 10 (EXPRESSION -> EXPRESSION EXPONENT EXPRESSION .)
    EXPONENT        shift and go to state 12


state 26

    (11) EXPRESSION -> EXPRESSION MOD EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 11 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    IS_EQUAL        reduce using rule 11 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    MOD             reduce using rule 11 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    DIVIDE          reduce using rule 11 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    TIMES           reduce using rule 11 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    MINUS           reduce using rule 11 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    PLUS            reduce using rule 11 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    $end            reduce using rule 11 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    RPAREN          reduce using rule 11 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    RCURLY          reduce using rule 11 (EXPRESSION -> EXPRESSION MOD EXPRESSION .)
    EXPONENT        shift and go to state 12


state 27

    (12) EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 12 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    IS_EQUAL        reduce using rule 12 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    MOD             reduce using rule 12 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    DIVIDE          reduce using rule 12 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    TIMES           reduce using rule 12 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    MINUS           reduce using rule 12 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    PLUS            reduce using rule 12 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    $end            reduce using rule 12 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    RPAREN          reduce using rule 12 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    RCURLY          reduce using rule 12 (EXPRESSION -> EXPRESSION DIVIDE EXPRESSION .)
    EXPONENT        shift and go to state 12


state 28

    (13) EXPRESSION -> EXPRESSION TIMES EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 13 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    IS_EQUAL        reduce using rule 13 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    MOD             reduce using rule 13 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    DIVIDE          reduce using rule 13 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    TIMES           reduce using rule 13 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    MINUS           reduce using rule 13 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    PLUS            reduce using rule 13 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    $end            reduce using rule 13 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    RPAREN          reduce using rule 13 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    RCURLY          reduce using rule 13 (EXPRESSION -> EXPRESSION TIMES EXPRESSION .)
    EXPONENT        shift and go to state 12


state 29

    (14) EXPRESSION -> EXPRESSION MINUS EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 14 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    IS_EQUAL        reduce using rule 14 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    MINUS           reduce using rule 14 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    PLUS            reduce using rule 14 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    $end            reduce using rule 14 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    RPAREN          reduce using rule 14 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    RCURLY          reduce using rule 14 (EXPRESSION -> EXPRESSION MINUS EXPRESSION .)
    EXPONENT        shift and go to state 12
    MOD             shift and go to state 13
    DIVIDE          shift and go to state 14
    TIMES           shift and go to state 15


state 30

    (15) EXPRESSION -> EXPRESSION PLUS EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    IS_NOT_EQUAL    reduce using rule 15 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    IS_EQUAL        reduce using rule 15 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    MINUS           reduce using rule 15 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    PLUS            reduce using rule 15 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    $end            reduce using rule 15 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    RPAREN          reduce using rule 15 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    RCURLY          reduce using rule 15 (EXPRESSION -> EXPRESSION PLUS EXPRESSION .)
    EXPONENT        shift and go to state 12
    MOD             shift and go to state 13
    DIVIDE          shift and go to state 14
    TIMES           shift and go to state 15


state 31

    (5) CONDITIONAL -> IF LPAREN EXPRESSION . RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL
    (6) CONDITIONAL -> IF LPAREN EXPRESSION . RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> IF LPAREN EXPRESSION . RPAREN LCURLY STATEMENT RCURLY
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    RPAREN          shift and go to state 34
    IS_NOT_EQUAL    shift and go to state 10
    IS_EQUAL        shift and go to state 11
    EXPONENT        shift and go to state 12
    MOD             shift and go to state 13
    DIVIDE          shift and go to state 14
    TIMES           shift and go to state 15
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17


state 32

    (17) EXPRESSION -> LPAREN EXPRESSION RPAREN .
    IS_NOT_EQUAL    reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    IS_EQUAL        reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    EXPONENT        reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    MOD             reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    DIVIDE          reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    TIMES           reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    MINUS           reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    PLUS            reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    $end            reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    RPAREN          reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)
    RCURLY          reduce using rule 17 (EXPRESSION -> LPAREN EXPRESSION RPAREN .)


state 33

    (4) ASSIGNMENT -> ID ASSIGN EXPRESSION .
    (8) EXPRESSION -> EXPRESSION . IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> EXPRESSION . IS_EQUAL EXPRESSION
    (10) EXPRESSION -> EXPRESSION . EXPONENT EXPRESSION
    (11) EXPRESSION -> EXPRESSION . MOD EXPRESSION
    (12) EXPRESSION -> EXPRESSION . DIVIDE EXPRESSION
    (13) EXPRESSION -> EXPRESSION . TIMES EXPRESSION
    (14) EXPRESSION -> EXPRESSION . MINUS EXPRESSION
    (15) EXPRESSION -> EXPRESSION . PLUS EXPRESSION
    $end            reduce using rule 4 (ASSIGNMENT -> ID ASSIGN EXPRESSION .)
    RCURLY          reduce using rule 4 (ASSIGNMENT -> ID ASSIGN EXPRESSION .)
    IS_NOT_EQUAL    shift and go to state 10
    IS_EQUAL        shift and go to state 11
    EXPONENT        shift and go to state 12
    MOD             shift and go to state 13
    DIVIDE          shift and go to state 14
    TIMES           shift and go to state 15
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17


state 34

    (5) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN . LCURLY STATEMENT RCURLY ELSE CONDITIONAL
    (6) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN . LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN . LCURLY STATEMENT RCURLY
    LCURLY          shift and go to state 35


state 35

    (5) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY . STATEMENT RCURLY ELSE CONDITIONAL
    (6) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY . STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY . STATEMENT RCURLY
    (1) STATEMENT -> . CONDITIONAL
    (2) STATEMENT -> . EXPRESSION
    (3) STATEMENT -> . ASSIGNMENT
    (5) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL
    (6) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    (4) ASSIGNMENT -> . ID ASSIGN EXPRESSION
    IF              shift and go to state 5
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 8
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 3
    STATEMENT                      shift and go to state 36
    CONDITIONAL                    shift and go to state 2
    ASSIGNMENT                     shift and go to state 4

state 36

    (5) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT . RCURLY ELSE CONDITIONAL
    (6) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT . RCURLY ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT . RCURLY
    RCURLY          shift and go to state 37


state 37

    (5) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY . ELSE CONDITIONAL
    (6) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY . ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY .
    ELSE            shift and go to state 38
    $end            reduce using rule 7 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY .)
    RCURLY          reduce using rule 7 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY .)


state 38

    (5) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE . CONDITIONAL
    (6) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE . LCURLY STATEMENT RCURLY
    (5) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL
    (6) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY
    LCURLY          shift and go to state 39
    IF              shift and go to state 5

    CONDITIONAL                    shift and go to state 40

state 39

    (6) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY . STATEMENT RCURLY
    (1) STATEMENT -> . CONDITIONAL
    (2) STATEMENT -> . EXPRESSION
    (3) STATEMENT -> . ASSIGNMENT
    (5) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL
    (6) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY
    (7) CONDITIONAL -> . IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY
    (8) EXPRESSION -> . EXPRESSION IS_NOT_EQUAL EXPRESSION
    (9) EXPRESSION -> . EXPRESSION IS_EQUAL EXPRESSION
    (10) EXPRESSION -> . EXPRESSION EXPONENT EXPRESSION
    (11) EXPRESSION -> . EXPRESSION MOD EXPRESSION
    (12) EXPRESSION -> . EXPRESSION DIVIDE EXPRESSION
    (13) EXPRESSION -> . EXPRESSION TIMES EXPRESSION
    (14) EXPRESSION -> . EXPRESSION MINUS EXPRESSION
    (15) EXPRESSION -> . EXPRESSION PLUS EXPRESSION
    (16) EXPRESSION -> . MINUS EXPRESSION
    (17) EXPRESSION -> . LPAREN EXPRESSION RPAREN
    (18) EXPRESSION -> . ID
    (19) EXPRESSION -> . NUMBER
    (4) ASSIGNMENT -> . ID ASSIGN EXPRESSION
    IF              shift and go to state 5
    MINUS           shift and go to state 7
    LPAREN          shift and go to state 6
    ID              shift and go to state 8
    NUMBER          shift and go to state 9

    EXPRESSION                     shift and go to state 3
    STATEMENT                      shift and go to state 41
    CONDITIONAL                    shift and go to state 2
    ASSIGNMENT                     shift and go to state 4

state 40

    (5) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL .
    $end            reduce using rule 5 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL .)
    RCURLY          reduce using rule 5 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE CONDITIONAL .)


state 41

    (6) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT . RCURLY
    RCURLY          shift and go to state 42


state 42

    (6) CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY .
    $end            reduce using rule 6 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY .)
    RCURLY          reduce using rule 6 (CONDITIONAL -> IF LPAREN EXPRESSION RPAREN LCURLY STATEMENT RCURLY ELSE LCURLY STATEMENT RCURLY .)
